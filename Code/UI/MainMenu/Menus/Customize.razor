@using Sandbox;
@using Sandbox.UI;

@namespace Facepunch.Minigolf.UI
@inherits BaseMenu

<root>
    <div class="row" style="width: 100%; height: 100%; justify-content: flex-start; align-items: stretch;">
        <div class="column grow gap">

            <div class="spacer" style="height: 16px;" />

            @if ( CurrentItem is not null )
            {
                @{
                    var txt = IsEquipped( CurrentItem ) ? "Un-Equip" : "Equip";
                }

                <div class="grow" />
             
                <div class="row">
                    <div class="grow" />

                    <div class="column gap padding background center" style="align-items: flex-end;">
                        <label>@CurrentItem.Title</label>
                        <label class="small">@CurrentItem.Category</label>
                        <label class="tiny">@(string.IsNullOrEmpty( CurrentItem.Description ) ? "No description for this item" : CurrentItem.Description )</label>

                        @if ( CurrentItem.RequiredAchievements.Count() > 0 )
                        {
                            <label class="small">Requirements</label>

                            <div class="row gap" style="max-width: 300px; flex-wrap: wrap; justify-content: flex-end;">
                               @foreach ( var achievementName in CurrentItem.RequiredAchievements )
                                {
                                    var achievement = GetAchievementFromName( achievementName );

                                    <AchievementCard Small=@true Achievement=@achievement />
                                }
                            </div>
                        }

                        <div class="span">
                            <ButtonCard Small=@true onclick="@(()=>Toggle( CurrentItem ))">
                                <Main>
                                    @txt
                                </Main>
                                <Overlay>
                                    @txt
                                </Overlay>
                            </ButtonCard>
                        </div>
                    </div>

                </div>
            }

            <div class="grow" />

            <div class="row gap">
                <div class="column gap">
                    <div class="row gap grow" style="align-items: flex-end;">
                        @foreach ( var group in Cosmetic.All.GroupBy( x => x.Category ) )
                        {
                            <ButtonCard Small=@true onclick="@(() => SetCategory( group.Key ) )">
                                <Main>
                                    @group.Key
                                </Main>
                                <Overlay>
                                    @group.Key
                                </Overlay>
                            </ButtonCard>
                        }

                        <div class="grow" />
                    </div>
                    <div @ref="Items" class="row gap" style="flex-wrap: wrap; height: 80px; overflow: scroll;	mask: linear-gradient( to bottom, white, black ) top bottom / 100% 5%;">
                        @foreach ( var group in Cosmetic.All.Where( x => x.Category == CurrentCategory ).GroupBy( x => x.CanEquip() ) )
                        {
                            foreach ( var item in group.OrderBy( x => x.Title ) )
                            {
                                <CosmeticCard Cosmetic=@item onclick=@(() => OnClickItem( item ) ) />
                            }
                        }
                    </div>
                </div>
            </div>

        </div>
	</div>
</root>

@code
{
    private bool IsEquipped( Cosmetic cosmetic ) => CosmeticController.Local.Cosmetics.All.Contains( cosmetic.GameObject );

    public Panel Items { get; set; }

    public Cosmetic CurrentItem { get; set; }

    private Sandbox.Achievement GetAchievementFromName( string name )
    {
        return Sandbox.Services.Achievements.All.FirstOrDefault( x => x.Name == name );
    }

    public void OnClickItem( Cosmetic item )
    {
        if ( CurrentItem.IsValid() )
            CosmeticController.Local.Preview( CurrentItem.GameObject, false );

        CurrentItem = item;

        CosmeticController.Local.Preview( item.GameObject, true );
    }

    public void Toggle( Cosmetic item )
    {
        var equipped = IsEquipped( item );
        CosmeticController.Local.Set( item.GameObject, !equipped );
        CosmeticController.Save();
    }

    public string CurrentCategory { get; set; } = "Skins";

    private void RefreshTree( Panel panel )
    {
        foreach ( var child in panel.Children )
        {
            child.StateHasChanged();

            RefreshTree( child );
        }
    }

    void SetCategory( string category )
    {
        CurrentCategory = category;
        RefreshTree( Items );
    }
}
